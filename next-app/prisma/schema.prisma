generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  admin         Boolean   @default(false)
  
  folders       Folder[]
  files         File[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  folderId      String   @id @default(cuid())
  name          String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  outerFolder   Folder?  @relation("OuterFolder", fields: [outerFolderId], references: [folderId])
  outerFolderId String?
  innerFolders  Folder[] @relation("OuterFolder")
  files         File[]
  links         Link[]
}

model File {
  fileId      String   @id @default(cuid())
  path        String
  name        String
  size        Float
  deleted     Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  folder      Folder   @relation(fields: [folderId], references: [folderId])
  folderId    String
  folderId    String
  links       Link[]
}

model Link {
  path         String   @id
  expires      DateTime?
  permission   String
  file         File?     @relation(fields: [fileId], references: [fileId])
  fileId       String?
  fileId       String?
  folder       Folder?   @relation(fields: [folderId], references: [folderId])
  folderId     String?
  folderId     String?
}