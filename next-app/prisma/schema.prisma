generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  admin         Boolean   @default(false)
  
  folders       Folder[]
  files         File[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  folderId      String   @id @default(cuid())
  name          String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  outerFolder   Folder?  @relation("OuterFolder", fields: [outerFolderId], references: [folderId])
  outerFolderId String?
  innerFolders  Folder[] @relation("OuterFolder")
  files         File[]
  links         Link[]
}

model File {
  fileId    String   @id @default(cuid())
  
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  folder    Folder   @relation(fields: [folderId], references: [folderId])
  folderId  String

  name   String

  links     Link[]

  hashFile  FileHash @relation(fields: [hash], references: [hash])
  hash      String
}

model FileHash {
  hash   String   @id

  path   String
  size   Float

  files  File[]
  tags   Tag[]
}

model Link {
  path         String     @id
  expires      DateTime?
  permission   Permission
  canSee       CanSee
  file         File?      @relation(fields: [fileId], references: [fileId], onDelete: Cascade)
  fileId       String?
  folder       Folder?    @relation(fields: [folderId], references: [folderId], onDelete: Cascade)
  folderId     String?
}

model Tag {
  tagId   String   @id @default(cuid())
  name    String
  fileHashes   FileHash[]
}

enum CanSee {
  ALL
  AUTH
}

enum Permission {
  VIEW
  EDIT
}